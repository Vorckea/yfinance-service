name: "Setup Python & Install Dependencies"
description: "Sets up Python environment and installs dependencies using Poetry"
inputs:
    python_version:
        description: "Python version to use for the setup"
        required: true
        type: string
    development:
        description: "Whether to install development dependencies"
        required: false
        default: 'false'
        type: boolean
runs:
    using: "composite"
    steps:
        - name: Setup Python
          uses: actions/setup-python@v4
          with:
              python-version: ${{ inputs.python_version }}

        - name: Cache Poetry
          uses: actions/cache@v4
          with:
              path: ~/.cache/pypoetry
              key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
              restore-keys: |
                poetry-${{ runner.os }}-

        - name: Install Poetry
          run: pip install --no-cache-dir poetry || { echo "Poetry install failed"; exit 1; }
          shell: bash

        - name: Configure Poetry
          run: poetry config virtualenvs.create false
          shell: bash

        - name: Install Dependencies
          if: ${{ inputs.development != 'true' }}
          run: poetry install --no-root --only main || { echo "Dependency install failed"; exit 1; }
          shell: bash

        - name: Install Dev Dependencies
          if: ${{ inputs.development == 'true' }}
          run: poetry install --no-root --with dev || { echo "Dev dependency install failed"; exit 1; }
          shell: bash
outputs: 
    python_version:
        description: "The Python version used"
        value: ${{ inputs.python_version }}
branding:
    icon: "package"
    color: "blue"

# Example usage:
# jobs:
#   setup:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: ./.github/actions/setup-python-deps
#         with:
#           python-version: '3.12'
#           with_pylint: true